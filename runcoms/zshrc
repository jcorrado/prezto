# -*- mode: shell-script -*-

[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

autoload -Uz promptinit; promptinit
PURE_GIT_PULL=0
PURE_CMD_MAX_EXEC_TIME=60
prompt pure

bindkey -N my-keymap emacs
bindkey -A my-keymap main
bindkey -r "^L"  # disable obsessive screen clearing
bindkey "^U" backward-kill-line

export EDITOR=emacsclient
export PAGER=most
export BROWSER=google-chrome

export BACKGROUNDS=~/keep/backgrounds

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias ls='ls -lh --color --group-directories-first'
alias wget_head='wget -qSO /dev/null'
alias mutt='mutt -F ~/.mutt/profiles/zoion/main'
alias mutt_birchbox='mutt -F ~/.mutt/profiles/birchbox/main'
alias feh="feh --auto-zoom --action1 'fbsetbg %f'"
alias emacs=emacsclient
alias dropbox="sudo docker run -d --restart=always --name=dropbox -v $HOME/Dropbox:/dbox/Dropbox janeczku/dropbox"

function poll_mail {
    local interval=${1:=120}
    while true; do
        $HOME/.mutt/bin/get_mail.sh
        echo "sleeping for $interval seconds..."
        sleep $interval
    done
}

function rename_to_sha1 {
    for f in *(.); do
        ext=$(echo $f | perl -F'\.' -ae 'print $F[-1]')
        sha1=$(sha1sum $f | perl -ae 'print $F[0]')
        mv -v "$f" "${sha1}.${ext}"
    done
}

function check_conf_repos {
    local repos
    repos=(~/.dotfiles*(/) ~/.zprezto ~/.password-store*(/))
    for r in $repos; do
        echo -n "checking repo: ${r}... "
        git -C $r fetch origin
        echo -e "done\n"
    done
}

function precmd {
    if [ ! -z "$TMUX" ]; then
	tmux rename-window $(echo $PWD | shorten_path.pl)
    fi
}

function preexec {
    if [ ! -z "$TMUX" ]; then
	tmux rename-window $1
    fi
}

# Xsession sets these but sometimes they get munged by ssh+tmux... and
# I haven't had a chance to work out why, so we just force this again
# here for shells.
function fix_ssh_env_vars {
    agent_info_file="$HOME/.gnupg/gpg-agent-info-$(hostname)"
    if [ -e $agent_info_file ]; then
        source $agent_info_file
    else
        export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
    fi
}

fix_ssh_env_vars

# I'm still thinking through how to handle the long-lines/f-f
# question, for mail and other cases.  Here's a quick fn that helps
# clean up files that I then move to Google Docs, GitHub Markdown,
# wikis, etc.
function lengthen-lines {
    perl -p0e 's!([^\n\s])\n([^\n])!$1 $2!g' $1
}

# function _scan-photo {
#     local x=${1:=125}
#     local y=${2:=125}
#     local iter=${3:=000}
#     setopt noclobber
#     local filename="img_${iter}.png"
#     scanimage --format=png --mode=Color --resolution=300 --depth=8 -x $x -y $y > $filename
#     feh $filename
# }

# function scan-photo-small-portrait {
#     local iter=$1
#     _scan-photo 80 112 $iter
# }

# function scan-photo-small-landscape {
#     local iter=$1
#     _scan-photo 113 81 $iter
# }

# function scan-photo-small-landscape-2 {
#     local iter=$1
#     _scan-photo 105 81 $iter
# }

# function scan-photo-small-landscape-3 {
#     local iter=$1
#     _scan-photo 95 82 $iter
# }

# function scan-photo-small-landscape-4 {
#     local iter=$1
#     _scan-photo 112 87 $iter
# }

function scan-us-letter {
    local base_name=${1:=letter}
    local iter=${2:=000}
    setopt noclobber
    local filename="${base_name}_${iter}.png"
    scanimage --format=png --mode=Color --resolution=150 --depth=8 -x 216 -y 279 > $filename
    feh --geometry "983x1273+210-62" $filename
}

function aws-ecs-list-tasks {
    local profile=$1
    local cluster=$2
    ( for i in $(aws --profile=$profile ecs list-tasks --cluster=$cluster | jq -r '.taskArns | .[]'); do
          aws --profile=$profile ecs describe-tasks --cluster=$cluster --task=$i | jq -r '.tasks[] | .overrides.containerOverrides[] | .name'
      done ) | sort | uniq -c
}

function emacs-save-remote-buffers {
    local remote_host=$1
    if [ -z "$remote_host" ]; then
        case $HOST in
            elder-whale)
                remote_host=buttercup
                ;;
            buttercup)
                remote_host=elder-whale
                ;;
            *)
                echo "please supply a hostname"
                return 1
                ;;
        esac
    fi
    ssh $remote_host "emacsclient -e '(if (save-some-buffers t) \"buffers saved\" \"no unsaved buffers\")'"
}
